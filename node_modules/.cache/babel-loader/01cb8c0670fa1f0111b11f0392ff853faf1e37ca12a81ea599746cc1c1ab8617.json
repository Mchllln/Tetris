{"ast":null,"code":"var _jsxFileName = \"D:\\\\Sharaga\\\\Engineering\\\\Tetris\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Board from './Board';\nimport './Game.css';\n\n// Constants\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_WIDTH = 10;\nconst BOARD_HEIGHT = 20;\nconst INITIAL_SPEED = 1000; // milliseconds\n\n// Scoring system\nconst SCORE_POINTS = {\n  SINGLE: 100,\n  DOUBLE: 300,\n  TRIPLE: 500,\n  TETRIS: 800,\n  SOFT_DROP: 1,\n  HARD_DROP: 2\n};\n\n// Tetromino shapes\nconst TETROMINOES = {\n  I: {\n    shape: [[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]],\n    color: '#00f0f0'\n  },\n  O: {\n    shape: [[1, 1], [1, 1]],\n    color: '#f0f000'\n  },\n  T: {\n    shape: [[0, 1, 0], [1, 1, 1], [0, 0, 0]],\n    color: '#a000f0'\n  },\n  S: {\n    shape: [[0, 1, 1], [1, 1, 0], [0, 0, 0]],\n    color: '#00f000'\n  },\n  Z: {\n    shape: [[1, 1, 0], [0, 1, 1], [0, 0, 0]],\n    color: '#f00000'\n  },\n  J: {\n    shape: [[1, 0, 0], [1, 1, 1], [0, 0, 0]],\n    color: '#0000f0'\n  },\n  L: {\n    shape: [[0, 0, 1], [1, 1, 1], [0, 0, 0]],\n    color: '#f0a000'\n  }\n};\nfunction Game() {\n  _s();\n  const [board, setBoard] = useState(createEmptyBoard());\n  const [currentPiece, setCurrentPiece] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [level, setLevel] = useState(1);\n  const [linesCleared, setLinesCleared] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  // Create empty board\n  function createEmptyBoard() {\n    return Array(BOARD_HEIGHT).fill().map(() => Array(BOARD_WIDTH).fill(0));\n  }\n\n  // Get random tetromino\n  function getRandomTetromino() {\n    const pieces = Object.keys(TETROMINOES);\n    const randomPiece = pieces[Math.floor(Math.random() * pieces.length)];\n    return {\n      ...TETROMINOES[randomPiece],\n      position: {\n        x: Math.floor(BOARD_WIDTH / 2) - 1,\n        y: 0\n      }\n    };\n  }\n\n  // Check if move is valid\n  const isValidMove = useCallback((shape, position) => {\n    for (let y = 0; y < shape.length; y++) {\n      for (let x = 0; x < shape[y].length; x++) {\n        if (shape[y][x]) {\n          const boardX = position.x + x;\n          const boardY = position.y + y;\n          if (boardX < 0 || boardX >= BOARD_WIDTH || boardY >= BOARD_HEIGHT || boardY >= 0 && board[boardY][boardX]) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }, [board]);\n\n  // Calculate score based on lines cleared\n  const calculateScore = useCallback(lines => {\n    let points = 0;\n    switch (lines) {\n      case 1:\n        points = SCORE_POINTS.SINGLE;\n        break;\n      case 2:\n        points = SCORE_POINTS.DOUBLE;\n        break;\n      case 3:\n        points = SCORE_POINTS.TRIPLE;\n        break;\n      case 4:\n        points = SCORE_POINTS.TETRIS;\n        break;\n      default:\n        points = 0;\n    }\n    return points * level;\n  }, [level]);\n\n  // Place piece on board\n  const placePiece = useCallback(() => {\n    if (!currentPiece) return;\n    const newBoard = [...board];\n    for (let y = 0; y < currentPiece.shape.length; y++) {\n      for (let x = 0; x < currentPiece.shape[y].length; x++) {\n        if (currentPiece.shape[y][x]) {\n          const boardY = currentPiece.position.y + y;\n          const boardX = currentPiece.position.x + x;\n          if (boardY >= 0) {\n            newBoard[boardY][boardX] = currentPiece.color;\n          }\n        }\n      }\n    }\n\n    // Check for completed lines\n    const completedLines = newBoard.reduce((count, row) => {\n      if (row.every(cell => cell !== 0)) {\n        return count + 1;\n      }\n      return count;\n    }, 0);\n    if (completedLines > 0) {\n      // Remove completed lines\n      for (let i = newBoard.length - 1; i >= 0; i--) {\n        if (newBoard[i].every(cell => cell !== 0)) {\n          newBoard.splice(i, 1);\n          newBoard.unshift(Array(BOARD_WIDTH).fill(0));\n        }\n      }\n\n      // Update score and lines cleared\n      const newScore = score + calculateScore(completedLines);\n      const newLinesCleared = linesCleared + completedLines;\n      setScore(newScore);\n      setLinesCleared(newLinesCleared);\n\n      // Update level every 10 lines\n      const newLevel = Math.floor(newLinesCleared / 10) + 1;\n      if (newLevel !== level) {\n        setLevel(newLevel);\n      }\n    }\n    setBoard(newBoard);\n    const nextPiece = getRandomTetromino();\n    setCurrentPiece(nextPiece);\n\n    // Check for game over - only if the new piece can't be placed at the starting position\n    if (!isValidMove(nextPiece.shape, nextPiece.position)) {\n      setGameOver(true);\n      setIsPlaying(false);\n    }\n  }, [board, currentPiece, score, linesCleared, level, isValidMove, calculateScore]);\n\n  // Move piece left/right\n  const movePiece = useCallback(direction => {\n    if (!currentPiece) return;\n    const newPosition = {\n      ...currentPiece.position,\n      x: currentPiece.position.x + direction\n    };\n    if (isValidMove(currentPiece.shape, newPosition)) {\n      setCurrentPiece({\n        ...currentPiece,\n        position: newPosition\n      });\n    }\n  }, [currentPiece, isValidMove]);\n\n  // Move piece down\n  const movePieceDown = useCallback(() => {\n    if (!currentPiece) return;\n    const newPosition = {\n      ...currentPiece.position,\n      y: currentPiece.position.y + 1\n    };\n    if (isValidMove(currentPiece.shape, newPosition)) {\n      setCurrentPiece({\n        ...currentPiece,\n        position: newPosition\n      });\n      setScore(prevScore => prevScore + SCORE_POINTS.SOFT_DROP);\n    } else {\n      placePiece();\n    }\n  }, [currentPiece, isValidMove, placePiece]);\n\n  // Hard drop\n  const hardDrop = useCallback(() => {\n    if (!currentPiece) return;\n    let newPosition = {\n      ...currentPiece.position\n    };\n    let dropDistance = 0;\n    while (isValidMove(currentPiece.shape, {\n      ...newPosition,\n      y: newPosition.y + 1\n    })) {\n      newPosition.y++;\n      dropDistance++;\n    }\n    setCurrentPiece({\n      ...currentPiece,\n      position: newPosition\n    });\n    setScore(prevScore => prevScore + dropDistance * SCORE_POINTS.HARD_DROP);\n    placePiece();\n  }, [currentPiece, isValidMove, placePiece]);\n\n  // Rotate piece\n  const rotatePiece = useCallback(() => {\n    if (!currentPiece) return;\n    const rotated = currentPiece.shape[0].map((_, i) => currentPiece.shape.map(row => row[i]).reverse());\n    if (isValidMove(rotated, currentPiece.position)) {\n      setCurrentPiece({\n        ...currentPiece,\n        shape: rotated\n      });\n    }\n  }, [currentPiece, isValidMove]);\n\n  // Start new game\n  const startGame = useCallback(() => {\n    setBoard(createEmptyBoard());\n    setCurrentPiece(getRandomTetromino());\n    setGameOver(false);\n    setScore(0);\n    setLevel(1);\n    setLinesCleared(0);\n    setIsPlaying(true);\n  }, []);\n\n  // Handle keyboard controls\n  useEffect(() => {\n    if (!isPlaying) return;\n    const handleKeyPress = event => {\n      if (gameOver) return;\n      switch (event.key) {\n        case 'ArrowLeft':\n          event.preventDefault();\n          movePiece(-1);\n          break;\n        case 'ArrowRight':\n          event.preventDefault();\n          movePiece(1);\n          break;\n        case 'ArrowDown':\n          event.preventDefault();\n          movePieceDown();\n          break;\n        case 'ArrowUp':\n          event.preventDefault();\n          rotatePiece();\n          break;\n        case ' ':\n          event.preventDefault();\n          hardDrop();\n          break;\n        default:\n          break;\n      }\n    };\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [isPlaying, gameOver, movePiece, movePieceDown, rotatePiece, hardDrop]);\n\n  // Game loop\n  useEffect(() => {\n    if (!isPlaying || gameOver) return;\n    const gameLoop = setInterval(() => {\n      movePieceDown();\n    }, Math.max(100, INITIAL_SPEED - (level - 1) * 100)); // Speed increases with level\n\n    return () => clearInterval(gameLoop);\n  }, [isPlaying, gameOver, movePieceDown, level]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score\",\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"level\",\n        children: [\"Level: \", level]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lines\",\n        children: [\"Lines: \", linesCleared]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this), !isPlaying && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startGame,\n        children: gameOver ? 'Play Again' : 'Start Game'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      board: board,\n      currentPiece: currentPiece,\n      gameOver: gameOver\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 327,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"q9KHmOhn73/xD0H1+lDe3dbOZ2k=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Board","jsxDEV","_jsxDEV","BOARD_WIDTH","BOARD_HEIGHT","INITIAL_SPEED","SCORE_POINTS","SINGLE","DOUBLE","TRIPLE","TETRIS","SOFT_DROP","HARD_DROP","TETROMINOES","I","shape","color","O","T","S","Z","J","L","Game","_s","board","setBoard","createEmptyBoard","currentPiece","setCurrentPiece","gameOver","setGameOver","score","setScore","level","setLevel","linesCleared","setLinesCleared","isPlaying","setIsPlaying","Array","fill","map","getRandomTetromino","pieces","Object","keys","randomPiece","Math","floor","random","length","position","x","y","isValidMove","boardX","boardY","calculateScore","lines","points","placePiece","newBoard","completedLines","reduce","count","row","every","cell","i","splice","unshift","newScore","newLinesCleared","newLevel","nextPiece","movePiece","direction","newPosition","movePieceDown","prevScore","hardDrop","dropDistance","rotatePiece","rotated","_","reverse","startGame","handleKeyPress","event","key","preventDefault","window","addEventListener","removeEventListener","gameLoop","setInterval","max","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/Sharaga/Engineering/Tetris/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport Board from './Board';\r\nimport './Game.css';\r\n\r\n// Constants\r\nconst BOARD_WIDTH = 10;\r\nconst BOARD_HEIGHT = 20;\r\nconst INITIAL_SPEED = 1000; // milliseconds\r\n\r\n// Scoring system\r\nconst SCORE_POINTS = {\r\n  SINGLE: 100,\r\n  DOUBLE: 300,\r\n  TRIPLE: 500,\r\n  TETRIS: 800,\r\n  SOFT_DROP: 1,\r\n  HARD_DROP: 2\r\n};\r\n\r\n// Tetromino shapes\r\nconst TETROMINOES = {\r\n  I: {\r\n    shape: [\r\n      [0, 0, 0, 0],\r\n      [1, 1, 1, 1],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0]\r\n    ],\r\n    color: '#00f0f0'\r\n  },\r\n  O: {\r\n    shape: [\r\n      [1, 1],\r\n      [1, 1]\r\n    ],\r\n    color: '#f0f000'\r\n  },\r\n  T: {\r\n    shape: [\r\n      [0, 1, 0],\r\n      [1, 1, 1],\r\n      [0, 0, 0]\r\n    ],\r\n    color: '#a000f0'\r\n  },\r\n  S: {\r\n    shape: [\r\n      [0, 1, 1],\r\n      [1, 1, 0],\r\n      [0, 0, 0]\r\n    ],\r\n    color: '#00f000'\r\n  },\r\n  Z: {\r\n    shape: [\r\n      [1, 1, 0],\r\n      [0, 1, 1],\r\n      [0, 0, 0]\r\n    ],\r\n    color: '#f00000'\r\n  },\r\n  J: {\r\n    shape: [\r\n      [1, 0, 0],\r\n      [1, 1, 1],\r\n      [0, 0, 0]\r\n    ],\r\n    color: '#0000f0'\r\n  },\r\n  L: {\r\n    shape: [\r\n      [0, 0, 1],\r\n      [1, 1, 1],\r\n      [0, 0, 0]\r\n    ],\r\n    color: '#f0a000'\r\n  }\r\n};\r\n\r\nfunction Game() {\r\n  const [board, setBoard] = useState(createEmptyBoard());\r\n  const [currentPiece, setCurrentPiece] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [level, setLevel] = useState(1);\r\n  const [linesCleared, setLinesCleared] = useState(0);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n  // Create empty board\r\n  function createEmptyBoard() {\r\n    return Array(BOARD_HEIGHT).fill().map(() => Array(BOARD_WIDTH).fill(0));\r\n  }\r\n\r\n  // Get random tetromino\r\n  function getRandomTetromino() {\r\n    const pieces = Object.keys(TETROMINOES);\r\n    const randomPiece = pieces[Math.floor(Math.random() * pieces.length)];\r\n    return {\r\n      ...TETROMINOES[randomPiece],\r\n      position: { x: Math.floor(BOARD_WIDTH / 2) - 1, y: 0 }\r\n    };\r\n  }\r\n\r\n  // Check if move is valid\r\n  const isValidMove = useCallback((shape, position) => {\r\n    for (let y = 0; y < shape.length; y++) {\r\n      for (let x = 0; x < shape[y].length; x++) {\r\n        if (shape[y][x]) {\r\n          const boardX = position.x + x;\r\n          const boardY = position.y + y;\r\n\r\n          if (\r\n            boardX < 0 ||\r\n            boardX >= BOARD_WIDTH ||\r\n            boardY >= BOARD_HEIGHT ||\r\n            (boardY >= 0 && board[boardY][boardX])\r\n          ) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }, [board]);\r\n\r\n  // Calculate score based on lines cleared\r\n  const calculateScore = useCallback((lines) => {\r\n    let points = 0;\r\n    switch (lines) {\r\n      case 1:\r\n        points = SCORE_POINTS.SINGLE;\r\n        break;\r\n      case 2:\r\n        points = SCORE_POINTS.DOUBLE;\r\n        break;\r\n      case 3:\r\n        points = SCORE_POINTS.TRIPLE;\r\n        break;\r\n      case 4:\r\n        points = SCORE_POINTS.TETRIS;\r\n        break;\r\n      default:\r\n        points = 0;\r\n    }\r\n    return points * level;\r\n  }, [level]);\r\n\r\n  // Place piece on board\r\n  const placePiece = useCallback(() => {\r\n    if (!currentPiece) return;\r\n\r\n    const newBoard = [...board];\r\n    for (let y = 0; y < currentPiece.shape.length; y++) {\r\n      for (let x = 0; x < currentPiece.shape[y].length; x++) {\r\n        if (currentPiece.shape[y][x]) {\r\n          const boardY = currentPiece.position.y + y;\r\n          const boardX = currentPiece.position.x + x;\r\n          if (boardY >= 0) {\r\n            newBoard[boardY][boardX] = currentPiece.color;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Check for completed lines\r\n    const completedLines = newBoard.reduce((count, row) => {\r\n      if (row.every(cell => cell !== 0)) {\r\n        return count + 1;\r\n      }\r\n      return count;\r\n    }, 0);\r\n\r\n    if (completedLines > 0) {\r\n      // Remove completed lines\r\n      for (let i = newBoard.length - 1; i >= 0; i--) {\r\n        if (newBoard[i].every(cell => cell !== 0)) {\r\n          newBoard.splice(i, 1);\r\n          newBoard.unshift(Array(BOARD_WIDTH).fill(0));\r\n        }\r\n      }\r\n      \r\n      // Update score and lines cleared\r\n      const newScore = score + calculateScore(completedLines);\r\n      const newLinesCleared = linesCleared + completedLines;\r\n      setScore(newScore);\r\n      setLinesCleared(newLinesCleared);\r\n      \r\n      // Update level every 10 lines\r\n      const newLevel = Math.floor(newLinesCleared / 10) + 1;\r\n      if (newLevel !== level) {\r\n        setLevel(newLevel);\r\n      }\r\n    }\r\n\r\n    setBoard(newBoard);\r\n    const nextPiece = getRandomTetromino();\r\n    setCurrentPiece(nextPiece);\r\n\r\n    // Check for game over - only if the new piece can't be placed at the starting position\r\n    if (!isValidMove(nextPiece.shape, nextPiece.position)) {\r\n      setGameOver(true);\r\n      setIsPlaying(false);\r\n    }\r\n  }, [board, currentPiece, score, linesCleared, level, isValidMove, calculateScore]);\r\n\r\n  // Move piece left/right\r\n  const movePiece = useCallback((direction) => {\r\n    if (!currentPiece) return;\r\n\r\n    const newPosition = {\r\n      ...currentPiece.position,\r\n      x: currentPiece.position.x + direction\r\n    };\r\n\r\n    if (isValidMove(currentPiece.shape, newPosition)) {\r\n      setCurrentPiece({ ...currentPiece, position: newPosition });\r\n    }\r\n  }, [currentPiece, isValidMove]);\r\n\r\n  // Move piece down\r\n  const movePieceDown = useCallback(() => {\r\n    if (!currentPiece) return;\r\n\r\n    const newPosition = {\r\n      ...currentPiece.position,\r\n      y: currentPiece.position.y + 1\r\n    };\r\n\r\n    if (isValidMove(currentPiece.shape, newPosition)) {\r\n      setCurrentPiece({ ...currentPiece, position: newPosition });\r\n      setScore(prevScore => prevScore + SCORE_POINTS.SOFT_DROP);\r\n    } else {\r\n      placePiece();\r\n    }\r\n  }, [currentPiece, isValidMove, placePiece]);\r\n\r\n  // Hard drop\r\n  const hardDrop = useCallback(() => {\r\n    if (!currentPiece) return;\r\n\r\n    let newPosition = { ...currentPiece.position };\r\n    let dropDistance = 0;\r\n    \r\n    while (isValidMove(currentPiece.shape, { ...newPosition, y: newPosition.y + 1 })) {\r\n      newPosition.y++;\r\n      dropDistance++;\r\n    }\r\n    \r\n    setCurrentPiece({ ...currentPiece, position: newPosition });\r\n    setScore(prevScore => prevScore + (dropDistance * SCORE_POINTS.HARD_DROP));\r\n    placePiece();\r\n  }, [currentPiece, isValidMove, placePiece]);\r\n\r\n  // Rotate piece\r\n  const rotatePiece = useCallback(() => {\r\n    if (!currentPiece) return;\r\n\r\n    const rotated = currentPiece.shape[0].map((_, i) =>\r\n      currentPiece.shape.map(row => row[i]).reverse()\r\n    );\r\n\r\n    if (isValidMove(rotated, currentPiece.position)) {\r\n      setCurrentPiece({ ...currentPiece, shape: rotated });\r\n    }\r\n  }, [currentPiece, isValidMove]);\r\n\r\n  // Start new game\r\n  const startGame = useCallback(() => {\r\n    setBoard(createEmptyBoard());\r\n    setCurrentPiece(getRandomTetromino());\r\n    setGameOver(false);\r\n    setScore(0);\r\n    setLevel(1);\r\n    setLinesCleared(0);\r\n    setIsPlaying(true);\r\n  }, []);\r\n\r\n  // Handle keyboard controls\r\n  useEffect(() => {\r\n    if (!isPlaying) return;\r\n\r\n    const handleKeyPress = (event) => {\r\n      if (gameOver) return;\r\n\r\n      switch (event.key) {\r\n        case 'ArrowLeft':\r\n          event.preventDefault();\r\n          movePiece(-1);\r\n          break;\r\n        case 'ArrowRight':\r\n          event.preventDefault();\r\n          movePiece(1);\r\n          break;\r\n        case 'ArrowDown':\r\n          event.preventDefault();\r\n          movePieceDown();\r\n          break;\r\n        case 'ArrowUp':\r\n          event.preventDefault();\r\n          rotatePiece();\r\n          break;\r\n        case ' ':\r\n          event.preventDefault();\r\n          hardDrop();\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyPress);\r\n    return () => window.removeEventListener('keydown', handleKeyPress);\r\n  }, [isPlaying, gameOver, movePiece, movePieceDown, rotatePiece, hardDrop]);\r\n\r\n  // Game loop\r\n  useEffect(() => {\r\n    if (!isPlaying || gameOver) return;\r\n\r\n    const gameLoop = setInterval(() => {\r\n      movePieceDown();\r\n    }, Math.max(100, INITIAL_SPEED - (level - 1) * 100)); // Speed increases with level\r\n\r\n    return () => clearInterval(gameLoop);\r\n  }, [isPlaying, gameOver, movePieceDown, level]);\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-info\">\r\n        <div className=\"score\">Score: {score}</div>\r\n        <div className=\"level\">Level: {level}</div>\r\n        <div className=\"lines\">Lines: {linesCleared}</div>\r\n        {!isPlaying && (\r\n          <button onClick={startGame}>\r\n            {gameOver ? 'Play Again' : 'Start Game'}\r\n          </button>\r\n        )}\r\n      </div>\r\n      <Board\r\n        board={board}\r\n        currentPiece={currentPiece}\r\n        gameOver={gameOver}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
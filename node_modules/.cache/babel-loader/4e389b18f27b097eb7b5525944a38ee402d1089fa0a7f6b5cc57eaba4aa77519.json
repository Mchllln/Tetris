{"ast":null,"code":"var _jsxFileName = \"D:\\\\Sharaga\\\\Engineering\\\\Tetris\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Board from './Board';\nimport './Game.css';\n\n// Constants\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_WIDTH = 10;\nconst BOARD_HEIGHT = 20;\nconst INITIAL_SPEED = 1000; // milliseconds\n\n// Tetromino shapes\nconst TETROMINOES = {\n  I: {\n    shape: [[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]],\n    color: '#00f0f0'\n  },\n  O: {\n    shape: [[1, 1], [1, 1]],\n    color: '#f0f000'\n  },\n  T: {\n    shape: [[0, 1, 0], [1, 1, 1], [0, 0, 0]],\n    color: '#a000f0'\n  },\n  S: {\n    shape: [[0, 1, 1], [1, 1, 0], [0, 0, 0]],\n    color: '#00f000'\n  },\n  Z: {\n    shape: [[1, 1, 0], [0, 1, 1], [0, 0, 0]],\n    color: '#f00000'\n  },\n  J: {\n    shape: [[1, 0, 0], [1, 1, 1], [0, 0, 0]],\n    color: '#0000f0'\n  },\n  L: {\n    shape: [[0, 0, 1], [1, 1, 1], [0, 0, 0]],\n    color: '#f0a000'\n  }\n};\nfunction Game() {\n  _s();\n  const [board, setBoard] = useState(createEmptyBoard());\n  const [currentPiece, setCurrentPiece] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  // Create empty board\n  function createEmptyBoard() {\n    return Array(BOARD_HEIGHT).fill().map(() => Array(BOARD_WIDTH).fill(0));\n  }\n\n  // Get random tetromino\n  function getRandomTetromino() {\n    const pieces = Object.keys(TETROMINOES);\n    const randomPiece = pieces[Math.floor(Math.random() * pieces.length)];\n    return {\n      ...TETROMINOES[randomPiece],\n      position: {\n        x: Math.floor(BOARD_WIDTH / 2) - 1,\n        y: 0\n      }\n    };\n  }\n\n  // Start new game\n  const startGame = useCallback(() => {\n    setBoard(createEmptyBoard());\n    setCurrentPiece(getRandomTetromino());\n    setGameOver(false);\n    setScore(0);\n    setIsPlaying(true);\n  }, []);\n\n  // Handle keyboard controls\n  useEffect(() => {\n    if (!isPlaying) return;\n    const handleKeyPress = event => {\n      if (gameOver) return;\n      switch (event.key) {\n        case 'ArrowLeft':\n          movePiece(-1);\n          break;\n        case 'ArrowRight':\n          movePiece(1);\n          break;\n        case 'ArrowDown':\n          movePieceDown();\n          break;\n        case 'ArrowUp':\n          rotatePiece();\n          break;\n        case ' ':\n          hardDrop();\n          break;\n        default:\n          break;\n      }\n    };\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [isPlaying, gameOver]);\n\n  // Game loop\n  useEffect(() => {\n    if (!isPlaying || gameOver) return;\n    const gameLoop = setInterval(() => {\n      movePieceDown();\n    }, INITIAL_SPEED);\n    return () => clearInterval(gameLoop);\n  }, [isPlaying, gameOver]);\n\n  // Move piece left/right\n  const movePiece = direction => {\n    if (!currentPiece) return;\n    const newPosition = {\n      ...currentPiece.position,\n      x: currentPiece.position.x + direction\n    };\n    if (isValidMove(currentPiece.shape, newPosition)) {\n      setCurrentPiece({\n        ...currentPiece,\n        position: newPosition\n      });\n    }\n  };\n\n  // Move piece down\n  const movePieceDown = () => {\n    if (!currentPiece) return;\n    const newPosition = {\n      ...currentPiece.position,\n      y: currentPiece.position.y + 1\n    };\n    if (isValidMove(currentPiece.shape, newPosition)) {\n      setCurrentPiece({\n        ...currentPiece,\n        position: newPosition\n      });\n    } else {\n      placePiece();\n    }\n  };\n\n  // Hard drop\n  const hardDrop = () => {\n    if (!currentPiece) return;\n    let newPosition = {\n      ...currentPiece.position\n    };\n    while (isValidMove(currentPiece.shape, {\n      ...newPosition,\n      y: newPosition.y + 1\n    })) {\n      newPosition.y++;\n    }\n    setCurrentPiece({\n      ...currentPiece,\n      position: newPosition\n    });\n    placePiece();\n  };\n\n  // Rotate piece\n  const rotatePiece = () => {\n    if (!currentPiece) return;\n    const rotated = currentPiece.shape[0].map((_, i) => currentPiece.shape.map(row => row[i]).reverse());\n    if (isValidMove(rotated, currentPiece.position)) {\n      setCurrentPiece({\n        ...currentPiece,\n        shape: rotated\n      });\n    }\n  };\n\n  // Check if move is valid\n  const isValidMove = (shape, position) => {\n    for (let y = 0; y < shape.length; y++) {\n      for (let x = 0; x < shape[y].length; x++) {\n        if (shape[y][x]) {\n          const boardX = position.x + x;\n          const boardY = position.y + y;\n          if (boardX < 0 || boardX >= BOARD_WIDTH || boardY >= BOARD_HEIGHT || boardY >= 0 && board[boardY][boardX]) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  };\n\n  // Place piece on board\n  const placePiece = () => {\n    if (!currentPiece) return;\n    const newBoard = [...board];\n    for (let y = 0; y < currentPiece.shape.length; y++) {\n      for (let x = 0; x < currentPiece.shape[y].length; x++) {\n        if (currentPiece.shape[y][x]) {\n          const boardY = currentPiece.position.y + y;\n          const boardX = currentPiece.position.x + x;\n          if (boardY >= 0) {\n            newBoard[boardY][boardX] = currentPiece.color;\n          }\n        }\n      }\n    }\n\n    // Check for completed lines\n    const linesCleared = newBoard.reduce((count, row) => {\n      if (row.every(cell => cell !== 0)) {\n        return count + 1;\n      }\n      return count;\n    }, 0);\n    if (linesCleared > 0) {\n      // Remove completed lines\n      for (let i = newBoard.length - 1; i >= 0; i--) {\n        if (newBoard[i].every(cell => cell !== 0)) {\n          newBoard.splice(i, 1);\n          newBoard.unshift(Array(BOARD_WIDTH).fill(0));\n        }\n      }\n      // Update score\n      setScore(prevScore => prevScore + linesCleared * 100);\n    }\n    setBoard(newBoard);\n    setCurrentPiece(getRandomTetromino());\n\n    // Check for game over\n    if (!isValidMove(currentPiece.shape, currentPiece.position)) {\n      setGameOver(true);\n      setIsPlaying(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score\",\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), !isPlaying && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startGame,\n        children: gameOver ? 'Play Again' : 'Start Game'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      board: board,\n      currentPiece: currentPiece,\n      gameOver: gameOver\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 269,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"8jNDH7pSvlhhyGfQs04aN1nSvLw=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Board","jsxDEV","_jsxDEV","BOARD_WIDTH","BOARD_HEIGHT","INITIAL_SPEED","TETROMINOES","I","shape","color","O","T","S","Z","J","L","Game","_s","board","setBoard","createEmptyBoard","currentPiece","setCurrentPiece","gameOver","setGameOver","score","setScore","isPlaying","setIsPlaying","Array","fill","map","getRandomTetromino","pieces","Object","keys","randomPiece","Math","floor","random","length","position","x","y","startGame","handleKeyPress","event","key","movePiece","movePieceDown","rotatePiece","hardDrop","window","addEventListener","removeEventListener","gameLoop","setInterval","clearInterval","direction","newPosition","isValidMove","placePiece","rotated","_","i","row","reverse","boardX","boardY","newBoard","linesCleared","reduce","count","every","cell","splice","unshift","prevScore","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/Sharaga/Engineering/Tetris/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport Board from './Board';\r\nimport './Game.css';\r\n\r\n// Constants\r\nconst BOARD_WIDTH = 10;\r\nconst BOARD_HEIGHT = 20;\r\nconst INITIAL_SPEED = 1000; // milliseconds\r\n\r\n// Tetromino shapes\r\nconst TETROMINOES = {\r\n  I: {\r\n    shape: [\r\n      [0, 0, 0, 0],\r\n      [1, 1, 1, 1],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0]\r\n    ],\r\n    color: '#00f0f0'\r\n  },\r\n  O: {\r\n    shape: [\r\n      [1, 1],\r\n      [1, 1]\r\n    ],\r\n    color: '#f0f000'\r\n  },\r\n  T: {\r\n    shape: [\r\n      [0, 1, 0],\r\n      [1, 1, 1],\r\n      [0, 0, 0]\r\n    ],\r\n    color: '#a000f0'\r\n  },\r\n  S: {\r\n    shape: [\r\n      [0, 1, 1],\r\n      [1, 1, 0],\r\n      [0, 0, 0]\r\n    ],\r\n    color: '#00f000'\r\n  },\r\n  Z: {\r\n    shape: [\r\n      [1, 1, 0],\r\n      [0, 1, 1],\r\n      [0, 0, 0]\r\n    ],\r\n    color: '#f00000'\r\n  },\r\n  J: {\r\n    shape: [\r\n      [1, 0, 0],\r\n      [1, 1, 1],\r\n      [0, 0, 0]\r\n    ],\r\n    color: '#0000f0'\r\n  },\r\n  L: {\r\n    shape: [\r\n      [0, 0, 1],\r\n      [1, 1, 1],\r\n      [0, 0, 0]\r\n    ],\r\n    color: '#f0a000'\r\n  }\r\n};\r\n\r\nfunction Game() {\r\n  const [board, setBoard] = useState(createEmptyBoard());\r\n  const [currentPiece, setCurrentPiece] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n  // Create empty board\r\n  function createEmptyBoard() {\r\n    return Array(BOARD_HEIGHT).fill().map(() => Array(BOARD_WIDTH).fill(0));\r\n  }\r\n\r\n  // Get random tetromino\r\n  function getRandomTetromino() {\r\n    const pieces = Object.keys(TETROMINOES);\r\n    const randomPiece = pieces[Math.floor(Math.random() * pieces.length)];\r\n    return {\r\n      ...TETROMINOES[randomPiece],\r\n      position: { x: Math.floor(BOARD_WIDTH / 2) - 1, y: 0 }\r\n    };\r\n  }\r\n\r\n  // Start new game\r\n  const startGame = useCallback(() => {\r\n    setBoard(createEmptyBoard());\r\n    setCurrentPiece(getRandomTetromino());\r\n    setGameOver(false);\r\n    setScore(0);\r\n    setIsPlaying(true);\r\n  }, []);\r\n\r\n  // Handle keyboard controls\r\n  useEffect(() => {\r\n    if (!isPlaying) return;\r\n\r\n    const handleKeyPress = (event) => {\r\n      if (gameOver) return;\r\n\r\n      switch (event.key) {\r\n        case 'ArrowLeft':\r\n          movePiece(-1);\r\n          break;\r\n        case 'ArrowRight':\r\n          movePiece(1);\r\n          break;\r\n        case 'ArrowDown':\r\n          movePieceDown();\r\n          break;\r\n        case 'ArrowUp':\r\n          rotatePiece();\r\n          break;\r\n        case ' ':\r\n          hardDrop();\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyPress);\r\n    return () => window.removeEventListener('keydown', handleKeyPress);\r\n  }, [isPlaying, gameOver]);\r\n\r\n  // Game loop\r\n  useEffect(() => {\r\n    if (!isPlaying || gameOver) return;\r\n\r\n    const gameLoop = setInterval(() => {\r\n      movePieceDown();\r\n    }, INITIAL_SPEED);\r\n\r\n    return () => clearInterval(gameLoop);\r\n  }, [isPlaying, gameOver]);\r\n\r\n  // Move piece left/right\r\n  const movePiece = (direction) => {\r\n    if (!currentPiece) return;\r\n\r\n    const newPosition = {\r\n      ...currentPiece.position,\r\n      x: currentPiece.position.x + direction\r\n    };\r\n\r\n    if (isValidMove(currentPiece.shape, newPosition)) {\r\n      setCurrentPiece({ ...currentPiece, position: newPosition });\r\n    }\r\n  };\r\n\r\n  // Move piece down\r\n  const movePieceDown = () => {\r\n    if (!currentPiece) return;\r\n\r\n    const newPosition = {\r\n      ...currentPiece.position,\r\n      y: currentPiece.position.y + 1\r\n    };\r\n\r\n    if (isValidMove(currentPiece.shape, newPosition)) {\r\n      setCurrentPiece({ ...currentPiece, position: newPosition });\r\n    } else {\r\n      placePiece();\r\n    }\r\n  };\r\n\r\n  // Hard drop\r\n  const hardDrop = () => {\r\n    if (!currentPiece) return;\r\n\r\n    let newPosition = { ...currentPiece.position };\r\n    while (isValidMove(currentPiece.shape, { ...newPosition, y: newPosition.y + 1 })) {\r\n      newPosition.y++;\r\n    }\r\n    setCurrentPiece({ ...currentPiece, position: newPosition });\r\n    placePiece();\r\n  };\r\n\r\n  // Rotate piece\r\n  const rotatePiece = () => {\r\n    if (!currentPiece) return;\r\n\r\n    const rotated = currentPiece.shape[0].map((_, i) =>\r\n      currentPiece.shape.map(row => row[i]).reverse()\r\n    );\r\n\r\n    if (isValidMove(rotated, currentPiece.position)) {\r\n      setCurrentPiece({ ...currentPiece, shape: rotated });\r\n    }\r\n  };\r\n\r\n  // Check if move is valid\r\n  const isValidMove = (shape, position) => {\r\n    for (let y = 0; y < shape.length; y++) {\r\n      for (let x = 0; x < shape[y].length; x++) {\r\n        if (shape[y][x]) {\r\n          const boardX = position.x + x;\r\n          const boardY = position.y + y;\r\n\r\n          if (\r\n            boardX < 0 ||\r\n            boardX >= BOARD_WIDTH ||\r\n            boardY >= BOARD_HEIGHT ||\r\n            (boardY >= 0 && board[boardY][boardX])\r\n          ) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  // Place piece on board\r\n  const placePiece = () => {\r\n    if (!currentPiece) return;\r\n\r\n    const newBoard = [...board];\r\n    for (let y = 0; y < currentPiece.shape.length; y++) {\r\n      for (let x = 0; x < currentPiece.shape[y].length; x++) {\r\n        if (currentPiece.shape[y][x]) {\r\n          const boardY = currentPiece.position.y + y;\r\n          const boardX = currentPiece.position.x + x;\r\n          if (boardY >= 0) {\r\n            newBoard[boardY][boardX] = currentPiece.color;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Check for completed lines\r\n    const linesCleared = newBoard.reduce((count, row) => {\r\n      if (row.every(cell => cell !== 0)) {\r\n        return count + 1;\r\n      }\r\n      return count;\r\n    }, 0);\r\n\r\n    if (linesCleared > 0) {\r\n      // Remove completed lines\r\n      for (let i = newBoard.length - 1; i >= 0; i--) {\r\n        if (newBoard[i].every(cell => cell !== 0)) {\r\n          newBoard.splice(i, 1);\r\n          newBoard.unshift(Array(BOARD_WIDTH).fill(0));\r\n        }\r\n      }\r\n      // Update score\r\n      setScore(prevScore => prevScore + (linesCleared * 100));\r\n    }\r\n\r\n    setBoard(newBoard);\r\n    setCurrentPiece(getRandomTetromino());\r\n\r\n    // Check for game over\r\n    if (!isValidMove(currentPiece.shape, currentPiece.position)) {\r\n      setGameOver(true);\r\n      setIsPlaying(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-info\">\r\n        <div className=\"score\">Score: {score}</div>\r\n        {!isPlaying && (\r\n          <button onClick={startGame}>\r\n            {gameOver ? 'Play Again' : 'Start Game'}\r\n          </button>\r\n        )}\r\n      </div>\r\n      <Board\r\n        board={board}\r\n        currentPiece={currentPiece}\r\n        gameOver={gameOver}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAO,YAAY;;AAEnB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,GAAG,EAAE;AACtB,MAAMC,YAAY,GAAG,EAAE;AACvB,MAAMC,aAAa,GAAG,IAAI,CAAC,CAAC;;AAE5B;AACA,MAAMC,WAAW,GAAG;EAClBC,CAAC,EAAE;IACDC,KAAK,EAAE,CACL,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACb;IACDC,KAAK,EAAE;EACT,CAAC;EACDC,CAAC,EAAE;IACDF,KAAK,EAAE,CACL,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,EAAE,CAAC,CAAC,CACP;IACDC,KAAK,EAAE;EACT,CAAC;EACDE,CAAC,EAAE;IACDH,KAAK,EAAE,CACL,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACV;IACDC,KAAK,EAAE;EACT,CAAC;EACDG,CAAC,EAAE;IACDJ,KAAK,EAAE,CACL,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACV;IACDC,KAAK,EAAE;EACT,CAAC;EACDI,CAAC,EAAE;IACDL,KAAK,EAAE,CACL,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACV;IACDC,KAAK,EAAE;EACT,CAAC;EACDK,CAAC,EAAE;IACDN,KAAK,EAAE,CACL,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACV;IACDC,KAAK,EAAE;EACT,CAAC;EACDM,CAAC,EAAE;IACDP,KAAK,EAAE,CACL,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACV;IACDC,KAAK,EAAE;EACT;AACF,CAAC;AAED,SAASO,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGtB,QAAQ,CAACuB,gBAAgB,CAAC,CAAC,CAAC;EACtD,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAAC0B,QAAQ,EAAEC,WAAW,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAAC4B,KAAK,EAAEC,QAAQ,CAAC,GAAG7B,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAAC8B,SAAS,EAAEC,YAAY,CAAC,GAAG/B,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACA,SAASuB,gBAAgBA,CAAA,EAAG;IAC1B,OAAOS,KAAK,CAACzB,YAAY,CAAC,CAAC0B,IAAI,CAAC,CAAC,CAACC,GAAG,CAAC,MAAMF,KAAK,CAAC1B,WAAW,CAAC,CAAC2B,IAAI,CAAC,CAAC,CAAC,CAAC;EACzE;;EAEA;EACA,SAASE,kBAAkBA,CAAA,EAAG;IAC5B,MAAMC,MAAM,GAAGC,MAAM,CAACC,IAAI,CAAC7B,WAAW,CAAC;IACvC,MAAM8B,WAAW,GAAGH,MAAM,CAACI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,MAAM,CAACO,MAAM,CAAC,CAAC;IACrE,OAAO;MACL,GAAGlC,WAAW,CAAC8B,WAAW,CAAC;MAC3BK,QAAQ,EAAE;QAAEC,CAAC,EAAEL,IAAI,CAACC,KAAK,CAACnC,WAAW,GAAG,CAAC,CAAC,GAAG,CAAC;QAAEwC,CAAC,EAAE;MAAE;IACvD,CAAC;EACH;;EAEA;EACA,MAAMC,SAAS,GAAG7C,WAAW,CAAC,MAAM;IAClCoB,QAAQ,CAACC,gBAAgB,CAAC,CAAC,CAAC;IAC5BE,eAAe,CAACU,kBAAkB,CAAC,CAAC,CAAC;IACrCR,WAAW,CAAC,KAAK,CAAC;IAClBE,QAAQ,CAAC,CAAC,CAAC;IACXE,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA9B,SAAS,CAAC,MAAM;IACd,IAAI,CAAC6B,SAAS,EAAE;IAEhB,MAAMkB,cAAc,GAAIC,KAAK,IAAK;MAChC,IAAIvB,QAAQ,EAAE;MAEd,QAAQuB,KAAK,CAACC,GAAG;QACf,KAAK,WAAW;UACdC,SAAS,CAAC,CAAC,CAAC,CAAC;UACb;QACF,KAAK,YAAY;UACfA,SAAS,CAAC,CAAC,CAAC;UACZ;QACF,KAAK,WAAW;UACdC,aAAa,CAAC,CAAC;UACf;QACF,KAAK,SAAS;UACZC,WAAW,CAAC,CAAC;UACb;QACF,KAAK,GAAG;UACNC,QAAQ,CAAC,CAAC;UACV;QACF;UACE;MACJ;IACF,CAAC;IAEDC,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAER,cAAc,CAAC;IAClD,OAAO,MAAMO,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAET,cAAc,CAAC;EACpE,CAAC,EAAE,CAAClB,SAAS,EAAEJ,QAAQ,CAAC,CAAC;;EAEzB;EACAzB,SAAS,CAAC,MAAM;IACd,IAAI,CAAC6B,SAAS,IAAIJ,QAAQ,EAAE;IAE5B,MAAMgC,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCP,aAAa,CAAC,CAAC;IACjB,CAAC,EAAE5C,aAAa,CAAC;IAEjB,OAAO,MAAMoD,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,CAAC5B,SAAS,EAAEJ,QAAQ,CAAC,CAAC;;EAEzB;EACA,MAAMyB,SAAS,GAAIU,SAAS,IAAK;IAC/B,IAAI,CAACrC,YAAY,EAAE;IAEnB,MAAMsC,WAAW,GAAG;MAClB,GAAGtC,YAAY,CAACoB,QAAQ;MACxBC,CAAC,EAAErB,YAAY,CAACoB,QAAQ,CAACC,CAAC,GAAGgB;IAC/B,CAAC;IAED,IAAIE,WAAW,CAACvC,YAAY,CAACb,KAAK,EAAEmD,WAAW,CAAC,EAAE;MAChDrC,eAAe,CAAC;QAAE,GAAGD,YAAY;QAAEoB,QAAQ,EAAEkB;MAAY,CAAC,CAAC;IAC7D;EACF,CAAC;;EAED;EACA,MAAMV,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAI,CAAC5B,YAAY,EAAE;IAEnB,MAAMsC,WAAW,GAAG;MAClB,GAAGtC,YAAY,CAACoB,QAAQ;MACxBE,CAAC,EAAEtB,YAAY,CAACoB,QAAQ,CAACE,CAAC,GAAG;IAC/B,CAAC;IAED,IAAIiB,WAAW,CAACvC,YAAY,CAACb,KAAK,EAAEmD,WAAW,CAAC,EAAE;MAChDrC,eAAe,CAAC;QAAE,GAAGD,YAAY;QAAEoB,QAAQ,EAAEkB;MAAY,CAAC,CAAC;IAC7D,CAAC,MAAM;MACLE,UAAU,CAAC,CAAC;IACd;EACF,CAAC;;EAED;EACA,MAAMV,QAAQ,GAAGA,CAAA,KAAM;IACrB,IAAI,CAAC9B,YAAY,EAAE;IAEnB,IAAIsC,WAAW,GAAG;MAAE,GAAGtC,YAAY,CAACoB;IAAS,CAAC;IAC9C,OAAOmB,WAAW,CAACvC,YAAY,CAACb,KAAK,EAAE;MAAE,GAAGmD,WAAW;MAAEhB,CAAC,EAAEgB,WAAW,CAAChB,CAAC,GAAG;IAAE,CAAC,CAAC,EAAE;MAChFgB,WAAW,CAAChB,CAAC,EAAE;IACjB;IACArB,eAAe,CAAC;MAAE,GAAGD,YAAY;MAAEoB,QAAQ,EAAEkB;IAAY,CAAC,CAAC;IAC3DE,UAAU,CAAC,CAAC;EACd,CAAC;;EAED;EACA,MAAMX,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAI,CAAC7B,YAAY,EAAE;IAEnB,MAAMyC,OAAO,GAAGzC,YAAY,CAACb,KAAK,CAAC,CAAC,CAAC,CAACuB,GAAG,CAAC,CAACgC,CAAC,EAAEC,CAAC,KAC7C3C,YAAY,CAACb,KAAK,CAACuB,GAAG,CAACkC,GAAG,IAAIA,GAAG,CAACD,CAAC,CAAC,CAAC,CAACE,OAAO,CAAC,CAChD,CAAC;IAED,IAAIN,WAAW,CAACE,OAAO,EAAEzC,YAAY,CAACoB,QAAQ,CAAC,EAAE;MAC/CnB,eAAe,CAAC;QAAE,GAAGD,YAAY;QAAEb,KAAK,EAAEsD;MAAQ,CAAC,CAAC;IACtD;EACF,CAAC;;EAED;EACA,MAAMF,WAAW,GAAGA,CAACpD,KAAK,EAAEiC,QAAQ,KAAK;IACvC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnC,KAAK,CAACgC,MAAM,EAAEG,CAAC,EAAE,EAAE;MACrC,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlC,KAAK,CAACmC,CAAC,CAAC,CAACH,MAAM,EAAEE,CAAC,EAAE,EAAE;QACxC,IAAIlC,KAAK,CAACmC,CAAC,CAAC,CAACD,CAAC,CAAC,EAAE;UACf,MAAMyB,MAAM,GAAG1B,QAAQ,CAACC,CAAC,GAAGA,CAAC;UAC7B,MAAM0B,MAAM,GAAG3B,QAAQ,CAACE,CAAC,GAAGA,CAAC;UAE7B,IACEwB,MAAM,GAAG,CAAC,IACVA,MAAM,IAAIhE,WAAW,IACrBiE,MAAM,IAAIhE,YAAY,IACrBgE,MAAM,IAAI,CAAC,IAAIlD,KAAK,CAACkD,MAAM,CAAC,CAACD,MAAM,CAAE,EACtC;YACA,OAAO,KAAK;UACd;QACF;MACF;IACF;IACA,OAAO,IAAI;EACb,CAAC;;EAED;EACA,MAAMN,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAI,CAACxC,YAAY,EAAE;IAEnB,MAAMgD,QAAQ,GAAG,CAAC,GAAGnD,KAAK,CAAC;IAC3B,KAAK,IAAIyB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtB,YAAY,CAACb,KAAK,CAACgC,MAAM,EAAEG,CAAC,EAAE,EAAE;MAClD,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGrB,YAAY,CAACb,KAAK,CAACmC,CAAC,CAAC,CAACH,MAAM,EAAEE,CAAC,EAAE,EAAE;QACrD,IAAIrB,YAAY,CAACb,KAAK,CAACmC,CAAC,CAAC,CAACD,CAAC,CAAC,EAAE;UAC5B,MAAM0B,MAAM,GAAG/C,YAAY,CAACoB,QAAQ,CAACE,CAAC,GAAGA,CAAC;UAC1C,MAAMwB,MAAM,GAAG9C,YAAY,CAACoB,QAAQ,CAACC,CAAC,GAAGA,CAAC;UAC1C,IAAI0B,MAAM,IAAI,CAAC,EAAE;YACfC,QAAQ,CAACD,MAAM,CAAC,CAACD,MAAM,CAAC,GAAG9C,YAAY,CAACZ,KAAK;UAC/C;QACF;MACF;IACF;;IAEA;IACA,MAAM6D,YAAY,GAAGD,QAAQ,CAACE,MAAM,CAAC,CAACC,KAAK,EAAEP,GAAG,KAAK;MACnD,IAAIA,GAAG,CAACQ,KAAK,CAACC,IAAI,IAAIA,IAAI,KAAK,CAAC,CAAC,EAAE;QACjC,OAAOF,KAAK,GAAG,CAAC;MAClB;MACA,OAAOA,KAAK;IACd,CAAC,EAAE,CAAC,CAAC;IAEL,IAAIF,YAAY,GAAG,CAAC,EAAE;MACpB;MACA,KAAK,IAAIN,CAAC,GAAGK,QAAQ,CAAC7B,MAAM,GAAG,CAAC,EAAEwB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC7C,IAAIK,QAAQ,CAACL,CAAC,CAAC,CAACS,KAAK,CAACC,IAAI,IAAIA,IAAI,KAAK,CAAC,CAAC,EAAE;UACzCL,QAAQ,CAACM,MAAM,CAACX,CAAC,EAAE,CAAC,CAAC;UACrBK,QAAQ,CAACO,OAAO,CAAC/C,KAAK,CAAC1B,WAAW,CAAC,CAAC2B,IAAI,CAAC,CAAC,CAAC,CAAC;QAC9C;MACF;MACA;MACAJ,QAAQ,CAACmD,SAAS,IAAIA,SAAS,GAAIP,YAAY,GAAG,GAAI,CAAC;IACzD;IAEAnD,QAAQ,CAACkD,QAAQ,CAAC;IAClB/C,eAAe,CAACU,kBAAkB,CAAC,CAAC,CAAC;;IAErC;IACA,IAAI,CAAC4B,WAAW,CAACvC,YAAY,CAACb,KAAK,EAAEa,YAAY,CAACoB,QAAQ,CAAC,EAAE;MAC3DjB,WAAW,CAAC,IAAI,CAAC;MACjBI,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,oBACE1B,OAAA;IAAK4E,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnB7E,OAAA;MAAK4E,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxB7E,OAAA;QAAK4E,SAAS,EAAC,OAAO;QAAAC,QAAA,GAAC,SAAO,EAACtD,KAAK;MAAA;QAAAuD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,EAC1C,CAACxD,SAAS,iBACTzB,OAAA;QAAQkF,OAAO,EAAExC,SAAU;QAAAmC,QAAA,EACxBxD,QAAQ,GAAG,YAAY,GAAG;MAAY;QAAAyD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjC,CACT;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eACNjF,OAAA,CAACF,KAAK;MACJkB,KAAK,EAAEA,KAAM;MACbG,YAAY,EAAEA,YAAa;MAC3BE,QAAQ,EAAEA;IAAS;MAAAyD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAClE,EAAA,CAvNQD,IAAI;AAAAqE,EAAA,GAAJrE,IAAI;AAyNb,eAAeA,IAAI;AAAC,IAAAqE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}